#!/bin/bash

function ensure_deps() {
    which pip &>/dev/null || (easy_install pip && echo "Installing pip")
    which eb &>/dev/null || (pip install awsebcli && echo "Installing eb")
    which aws &>/dev/null || (pip install awscli && echo "Installing aws")
}

function ensure_keys() {
    if [ -z "${AWS_ACCESS_KEY_ID}" -o -z "${AWS_SECRET_ACCESS_KEY}" ]; then
        echo -n "You must export your credentials in AWS_ACCESS_KEY_ID and"
        echo " AWS_SECRET_ACCESS_KEY."
        exit -1
    fi
}

function ensure_setup() {
    if [ ! -d .elasticbeanstalk ]; then
        echo "Setup is required..."
        echo -n "What's the ssh key you want to use here? "
        read key
        export default_key=${key}
        setup
    fi
}

function ensure_version() {
    if [ ! -f config/elasticsearch-${version}.yml ]; then
        echo -n "You must create an appropriate elasticsearch.yml file for your"
        echo " version"
        exit -1
    fi
}

function setup() {
    ensure_deps
    ensure_keys
    if [ ! -d .elasticbeanstalk ]; then
        if [ -z "${AWS_ACCESS_KEY_ID}" -o -z "${AWS_SECRET_ACCESS_KEY}" ]; then
            echo -n "You must export your credentials in AWS_ACCESS_KEY_ID and"
            echo " AWS_SECRET_ACCESS_KEY."
        else
            echo "Setting up EBT application"
            eb init ${application} -r ${region} -p ${platform} -k ${default_key}
        fi
    else
        echo "Setup already done"
    fi
}

function get_namespace() {
    case "$1" in
        "UpperBreachScaleIncrement" | \
        "LowerBreachScaleIncrement" | \
        "LowerThreshold" | \
        "MeasureName" | \
        "UpperThreshold" | \
        "Unit")
            echo aws:autoscaling:trigger
            ;;
        "MinSize" | \
        "Cooldown" | \
        "Availability Zones" | \
        "MaxSize")
            echo aws:autoscaling:asg
            ;;
        "RollingUpdateType" | \
        "RollingUpdateEnabled")
            echo aws:autoscaling:updatepolicy:rollingupdate
            ;;
        *)
            echo "Option/value pair invalid"
            exit -1
    esac
}

function ensure_cluster_name() {
    if [ $(eb list | egrep -c "^${cluster_name}$") -ne 1 ]; then
        echo -n "The cluster name provided doesn't match exactly with any "
        echo "cluster."
        exit -1
    fi
}

function wait_until_env_ready() {
    echo -n "Waiting for ${cluster_name} to be ready"
    until $(
        aws elasticbeanstalk describe-environments \
            --environment-names ${cluster_name} \
        | grep -c Ready &> /dev/null
    ); do
        sleep 5
        echo -n "."
    done
    echo ""
}

function modify() {
    ensure_setup
    ensure_cluster_name
    for option in $(echo ${options} | tr ',' ' '); do
        option_name=$(echo ${option} | cut -d= -f1)
        value=$(echo ${option} | cut -d= -f2)
        namespace=$(get_namespace ${option_name})
        option_item="Namespace=${namespace},"
        option_item=${option_item}"OptionName=${option_name},"
        option_item=${option_item}"Value=${value}"
        echo "Modifying ${option_name} for ${cluster_name}"
        wait_until_env_ready
        aws elasticbeanstalk update-environment \
            --environment-name ${cluster_name} \
            --option-settings ${option_item}
    done
}

function create() {
    ensure_setup
    ensure_version
    git checkout -B ${cluster_name}
    echo "CLUSTER_NAME=${cluster_name}" > .env
    echo "AWS_KEY_ID=${AWS_ACCESS_KEY_ID}" >> .env
    echo "AWS_KEY=${AWS_SECRET_ACCESS_KEY}" >> .env
    echo "AWS_REGION=${region}" >> .env
    echo "EC2_TAG_NAME=${cluster_name}" >> .env
    echo "MASTER_NODES=${nodes}" >> .env
    echo "PORT=9200" >> .env
    ENV_VARS=$(cat .env | xargs | sed 's/ /,/g')
    sed -i.bak \
        -e "s/ES_VER=2.1.0/ES_VER=${version}/g" \
        .ebextensions/10_setup_app.config
    rm .ebextensions/10_setup_app.config.bak
    cp config/elasticsearch-${version}.yml config/elasticsearch.yml
    if [ "${version}" == "0.90.10" ]; then
        PROCFILE="web:ES_CLASSPATH=/usr/local/elasticsearch-0.90.10/lib/*"
        PROCFILE=${PROCFILE}" JAVA_OPTS='-Des.path.conf=/var/app/current/config"
        PROCFILE=${PROCFILE}" -Des.path.data=/var/esdata'"
        PROCFILE=${PROCFILE}" /opt/aws/bin/elasticsearch"
    else
        PROCFILE="web:/opt/aws/bin/elasticsearch"
        PROCFILE=${PROCFILE}" --path.conf=/var/app/current/config"
    fi
    echo ${PROCFILE} > Procfile
    VPC_PARAMS=""
    if [ "$network" == "vpc" ]; then
        vpc_id=$(
            aws ec2 describe-vpcs \
                --filters "Name=tag:Name,Values=${environment}" \
                | grep VpcId | tr -d ' ' | cut -d\| -f4
        )
        if [ "${vpc_id}" == "" ]; then
            echo "No VPC found for ${environment}"
            exit -1
        fi
        echo "Using VPC ${vpc_id} for ${environment}"
        subnet_ids=$(
            aws ec2 describe-subnets \
                --filters "Name=vpc-id,Values=${vpc_id}" \
                | grep SubnetId \
                | tr -d ' ' \
                | cut -d\| -f4 \
                | tr "\n" ',' \
                | sed -e 's/,$//'
        )
        sg_id=$(
            aws ec2 describe-security-groups \
                --filters "Name=vpc-id,Values=${vpc_id}" \
                "Name=group-name,Values=${environment}-elasticsearch" \
                | egrep "^\|\|  GroupId" \
                | tr -d ' ' \
                | cut -d\| -f4
        )
        VPC_PARAMS="--vpc --vpc.id ${vpc_id} --vpc.ec2subnets ${subnet_ids}"
        VPC_PARAMS=${VPC_PARAMS}" --vpc.elbsubnets ${subnet_ids} --vpc.elbpublic"
        VPC_PARAMS=${VPC_PARAMS}" --vpc.publicip"
        VPC_PARAMS=${VPC_PARAMS}" --vpc.securitygroups ${sg_id}"
    fi
    git commit -am "Deploy ${cluster_name}"
    echo -n "Creating cluster ${cluster_name}"
    if [ "$network" == "vpc" ]; then
        echo " with ${VPC_PARAMS}"
    else
        echo ""
    fi
    eb create \
       -c ${cluster_name} \
       --envvars ${ENV_VARS} \
       --platform=${platform} \
       -i ${instance_type} \
       --scale ${nodes} \
       ${VPC_PARAMS} \
       ${cluster_name}
    if [ "$network" == "classic" ]; then
        instance_ids=$(
            eb list -v \
                | grep ${cluster_name} \
                | cut -d: -f2 \
                | tr -d "' \[\]" \
                | tr ',' ' '
        )
        sg=$(
            aws ec2 describe-instances \
                --instance-ids ${instance_ids} \
                | egrep "^\|{3}  GroupId" \
                | uniq \
                | cut -d\| -f5 \
                | tr -d ' '
        )
        aws ec2 authorize-security-group-ingress \
            --protocol tcp \
            --port 9200-9400 \
            --source-group ${sg} \
            --group-id ${sg}
        aws ec2 authorize-security-group-ingress \
            --protocol icmp \
            --port -1 \
            --source-group ${sg} \
            --group-id ${sg}
    fi
    git checkout master
}
